name: EAS Build

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      profile:
        description: 'Build profile (preview, production)'
        required: false
        default: 'preview'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8.15.1
      - uses: actions/setup-node@v4
        with:
          node-version: 18.20.8
          cache: 'pnpm'
      - uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          expo-version: latest
          packager: pnpm
          token: ${{ secrets.EXPO_API_KEY }}
      - name: Check EXPO_API_KEY
        run: |
          echo "EXPO_API_KEY is ${#EXPO_API_KEY} characters long"
      - name: Install dependencies
        run: pnpm install
        run: pnpm add -g eas-cli
      - name: Verify EAS CLI installation
        run: eas --version
      - name: Build app
        run: |
          echo "Starting EAS build..."
          cd apps/mobile
          PROFILE=${{ github.event.inputs.profile || 'preview' }}
          echo "Building with profile: $PROFILE"
          eas build --platform android --profile $PROFILE --non-interactive
          echo "Build completed"
        env:
          EXPO_API_KEY: ${{ secrets.EXPO_API_KEY }}
      - name: Create build directory
        run: mkdir -p builds/latest
      - name: Wait for build to complete
        run: |
          echo "Waiting for build to complete..."
          sleep 30
      - name: Download build artifacts
        run: |
          echo "Downloading build artifacts..."
          BUILD_URL=$(eas build:list --limit=1 --status=finished --platform=android --json | jq -r '.[0].artifacts.buildUrl')
          curl -L -o builds/latest/app-release.aab $BUILD_URL
        env:
          EXPO_API_KEY: ${{ secrets.EXPO_API_KEY }}
      - name: Upload to GitHub Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./builds/latest/app-release.aab
          asset_name: app-release.aab
          asset_content_type: application/octet-stream
      - name: Upload to Supabase
        run: |
          VERSION=$(node -p "require('./package.json').version")
          BUILD_NUMBER=$(date +%Y%m%d%H%M)
          
          # Upload build to Supabase Storage
          node -e "
            const { createClient } = require('@supabase/supabase-js');
            const fs = require('fs');

            async function uploadBuild() {
              const supabase = createClient(
                process.env.SUPABASE_URL,
                process.env.SUPABASE_SERVICE_ROLE_KEY
              );
              
              const file = fs.readFileSync('./builds/latest/app-release.aab');
              const filePath = \`android/\${process.env.VERSION}/\${process.env.BUILD_NUMBER}/app-release.aab\`;
              
              const { data, error } = await supabase.storage
                .from('builds')
                .upload(filePath, file, {
                  contentType: 'application/octet-stream',
                  upsert: true
                });
                
              if (error) {
                console.error('Error uploading build:', error);
                process.exit(1);
              }
              
              console.log('Build uploaded successfully:', data);
              
              // Create builds entry
              const { error: dbError } = await supabase
                .from('builds')
                .insert({
                  version: process.env.VERSION,
                  build_number: parseInt(process.env.BUILD_NUMBER),
                  platform: 'android',
                  build_type: 'release',
                  storage_path: filePath,
                  file_size: file.length,
                  commit_hash: process.env.GITHUB_SHA,
                  release_notes: process.env.RELEASE_NOTES || 'Build created by GitHub Actions'
                });
                
              if (dbError) {
                console.error('Error creating build record:', dbError);
                process.exit(1);
              }
            }
            
            uploadBuild();
          "
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          VERSION: ${{ env.VERSION }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_NOTES: ${{ github.event.release.body || 'Build created by GitHub Actions' }}
